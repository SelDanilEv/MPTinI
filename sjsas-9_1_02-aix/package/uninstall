#!/bin/sh
# This script is used to launch Sun Java System Application Server 8.0PE 
# uninstallation program on Macintosh Operating systems.
# It accepts a variety of useful arguments which are defined in the usage
# section. Currently it does not support 'console' mode of uninstallation.
# All other uninstallation modes are possible through this script.
# Also returns useful error codes to the caller thus very useful in
# automation.

# None of the arguments are required to run this script. The script
# assumes optimal default values for arguments when none is provided.

 

# Set error codes to be used by caller. The codes starts @201 to make sure
# that the existing OS codes are not used.
setErrorCodes() {
INVALID_OS_ARCH=201
INVALID_JAVA_PATH=202
INVALID_JAVA_VERSION=203
USAGE_ERROR=204
}

# This script can only be run on a Mac OS. Bails out if an attempt is
# made to run on any other OS.
checkOS() {
uName=`${UNAME}`
if [ ! "${uName}" = "AIX" ]
then
	echo "This uninstallation program is meant only to be run on a AIX OS"
	exit ${INVALID_OS_ARCH}
fi
}

# The uninstaller requires any java 1.5.x to run. So if one is not provided
# through -javahome argument then the default Mac Java under /usr/bin/java
# will be used and the version is validated in either case.
validateJavaHome() {
if [ "${JAVAHOME_PROVIDED}" = "1" ]
then
	validateUserProvidedJavaHome
else
	validateDefaultJavaHome
fi
}

validateDefaultJavaHome() {
AIX_JAVAHOME=/usr/java5
#Try to use Java from AIX Default
if [ -f "${AIX_JAVAHOME}/bin/java" ]
then
	javaVersion=`${AIX_JAVAHOME}/bin/java -version 2>&1 | ${GREP} 1.5`
	if [ ! -z "${javaVersion}" ]
	then
		JAVAHOME=${AIX_JAVAHOME}
		return
	fi
fi

#if the control comes here, then it means that this script is not able to find
#a suitable Java to run the installer, flag the error and exit

echo "Installer cannot find a suitable 1.5.x version of JDK under"
echo ""
echo "	${AIX_JAVA_HOME}"
echo ""
echo "Please rerun with -javahome argument pointing to a valid 1.5 version of JDK."
echo ""
exit ${INVALID_JAVA_PATH}
}


validateUserProvidedJavaHome() {
if [ "${JAVAHOME}" = "" ]
then
	echo "Invalid JavaHome provided"
	exit ${INVALID_JAVA_PATH}
fi
	
if [ ! -f "${JAVAHOME}/bin/java" ]
then
	echo "Java not found under specified location. Please rerun with -javahome <valid jdk directory>"
	exit ${INVALID_JAVA_PATH}
fi

javaVersion=`${JAVAHOME}/bin/java -version 2>&1 | ${GREP} 1.5`
if [ -z "${javaVersion}" ]
then
	echo "Java Version Invalid, required version is 1.5.x. Please rerun with -javahome <valid jdk directory>"
	exit ${INVALID_JAVA_VERSION}
fi
}
# Initialize variables used in this script.
initVars() {
UNAME=/usr/bin/uname
ARGS=" "
GREP=/usr/bin/grep
AIX_JAVAHOME=/usr/java5
JAVAHOME=${AIX_JAVA_HOME}
JAVAHOME_PROVIDED=0
CLASSNAME="appserv_uninstall"
SPECIALCNPPROP=" -Dwizard.NoNativeAbort=true "
CLASSPATH=" -cp ."
}

# Parse arguments and set appropriate local variable values.
parseArgs() {
while [ $# -ne 0 ]
do
	if [ "${1}" = "-help" ]
	then
		showUsage
		exit ${USAGE_ERROR}
	fi
	if [ "${1}" = "-silent" ]
	then
		SPECIALCNPPROP=" ${SPECIALCNPPROP} -Djava.awt.headless=true "
		ARGS=" ${ARGS} -nodisplay -noconsole "
	else if [ "${1}" = "-console" ]
	then
		SPECIALCNPPROP=" ${SPECIALCNPPROP} -Djava.awt.headless=true "
		ARGS=" ${ARGS} -nodisplay "
	else if [ "${1}" = "-javahome" ]
	then
		JAVAHOME_PROVIDED=1
		JAVAHOME="${2}"
		shift
	else if [ "${1}" = "-debug" ]
	then
		USERDEFINEDPROPS=" ${USERDEFINEDPROPS} -Drave.debug=true "
	else
		showUsage
		exit ${USAGE_ERROR}
	fi
	fi
	fi
	fi
	shift
	done
}

# Prepare the commandline with arguments,properties and classpath.
prepareCmdLine() {
CMDLINE="${JAVAHOME}/bin/java -Dinstalljava.home=${JAVAHOME} ${USERDEFINEDPROPS} ${SPECIALCNPPROP} ${CLASSPATH} ${CLASSNAME} ${ARGS}"
}

# Invoke uninstaller, wait for the completion and return the exit code passed
# back from the uninstaller code.
invokeInstaller() {
${CMDLINE}
retValue=$?
exit ${retValue}
}

# Usage
showUsage() {
echo " "
echo " "
echo "Usage: ${0} [-help] [-console] [-silent] [-javahome <javahome>] [-debug]"
echo " "
}

# The program starts here.
initVars
checkOS
parseArgs $*
validateJavaHome 
prepareCmdLine
invokeInstaller
